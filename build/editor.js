(()=>{"use strict";const e=window.React,t=window.wp.compose,n=window.wp.blockEditor,o=window.wp.components,i=window.wp.hooks;let s;function r(e){return Object.entries(e).map((([e,t])=>t.map((t=>`${e}:${t}`)).join(" "))).join(" ").replace(/root:/g,"")}window.wp.i18n,!s&&"function"==typeof createTailwindcssContext&&tailwind?.config&&(s=createTailwindcssContext(tailwind.config).getClassList());const l=(0,t.createHigherOrderComponent)((t=>i=>{const l=function(e){const t={root:[]};return e.forEach((e=>{const[n,...o]=e.split(/:(?!.*:)/);0!==o.length?(t[n]||(t[n]=[]),t[n].push(o[0])):t.root.push(n)})),t}((c=i.attributes.className)?[...new Set(c.split(" "))].filter(Boolean):[]);var c;return(0,e.createElement)(e.Fragment,null,(0,e.createElement)(t,{key:"edit",...i}),(0,e.createElement)(n.InspectorControls,null,(0,e.createElement)(o.PanelBody,{title:"Tailwind CSS Classes"},Object.entries(l).map((([t,n])=>(0,e.createElement)(o.FormTokenField,{key:t,label:t,onChange:e=>{const n={...l,[t]:[...new Set(e)].sort()};i.setAttributes({className:r(n)})},value:n,suggestions:s}))))))}),"withMyPluginControls");(0,i.addFilter)("editor.BlockEdit","my-plugin/with-inspector-controls",l)})();